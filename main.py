import os

from dotenv import load_dotenv
import telebot
from telebot import types
from telebot.types import ReplyKeyboardRemove
import requests

load_dotenv()
TOKEN = os.getenv('BOT_TOKEN')

# File to store card number
CARD_FILE = 'card.txt'

def get_card_number():
    if not os.path.exists(CARD_FILE):
        return None
    with open(CARD_FILE, 'r') as f:
        return f.read().strip()

def set_card_number(number: str):
    with open(CARD_FILE, 'w') as f:
        f.write(number)

ADMIN_ID = 7659986817
# Crypto payment support
CRYPTO_CURRENCIES = ['BTC', 'ETH', 'LTC', 'SOL', 'TON', 'USDT trc20', 'USDT erc20']
CRYPTO_IDS = {
    'BTC': 'bitcoin', 'ETH': 'ethereum', 'LTC': 'litecoin',
    'SOL': 'solana', 'TON': 'the-open-network', 'USDT trc20': 'tether',
    'usdt erc20': 'tether'
}
CRYPTO_ADDRESSES = {
    'BTC': os.getenv('BTC_ADDRESS'),
    'ETH': os.getenv('ETH_ADDRESS'),
    'LTC': os.getenv('LTC_ADDRESS'),
    'SOL': os.getenv('SOL_ADDRESS'),
    'TON': os.getenv('TON_ADDRESS'),
    'USDT trc20': os.getenv('TRC_ADDRESS'),
    'USDT erc20': os.getenv('ERC_ADDRESS')
}
bot = telebot.TeleBot(TOKEN)

# –î–∞–Ω–Ω—ã–µ –ø–æ –≥–æ—Ä–æ–¥–∞–º
CITIES = [
    # –ë–µ–ª–∞—Ä—É—Å—å
    {'country': 'üáßüáæ', 'name': '–ú–∏–Ω—Å–∫'},
    {'country': 'üáßüáæ', 'name': '–í–∏—Ç–µ–±—Å–∫'},
    {'country': 'üáßüáæ', 'name': '–ì—Ä–æ–¥–Ω–æ'},
    {'country': 'üáßüáæ', 'name': '–ë—Ä–µ—Å—Ç'},
    # –£–∫—Ä–∞–∏–Ω–∞
    {'country': 'üá∫üá¶', 'name': '–ö–∏–µ–≤'},
    {'country': 'üá∫üá¶', 'name': '–û–¥–µ—Å—Å–∞'},
    {'country': 'üá∫üá¶', 'name': '–õ—å–≤–æ–≤'},
    # –†–æ—Å—Å–∏—è (–ø—Ä–∏–º–µ—Ä–Ω–æ 25 –≥–æ—Ä–æ–¥–æ–≤)
    {'country': 'üá∑üá∫', 'name': '–ú–æ—Å–∫–≤–∞'},
    {'country': 'üá∑üá∫', 'name': '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥'},
    {'country': 'üá∑üá∫', 'name': '–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫'},
    {'country': 'üá∑üá∫', 'name': '–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥'},
    {'country': 'üá∑üá∫', 'name': '–ö–∞–∑–∞–Ω—å'},
    {'country': 'üá∑üá∫', 'name': '–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥'},
    {'country': 'üá∑üá∫', 'name': '–ß–µ–ª—è–±–∏–Ω—Å–∫'},
    {'country': 'üá∑üá∫', 'name': '–°–∞–º–∞—Ä–∞'},
    {'country': 'üá∑üá∫', 'name': '–û–º—Å–∫'},
    {'country': 'üá∑üá∫', 'name': '–†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É'},
    {'country': 'üá∑üá∫', 'name': '–£—Ñ–∞'},
    {'country': 'üá∑üá∫', 'name': '–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫'},
    {'country': 'üá∑üá∫', 'name': '–í–æ—Ä–æ–Ω–µ–∂'},
    {'country': 'üá∑üá∫', 'name': '–ü–µ—Ä–º—å'},
    {'country': 'üá∑üá∫', 'name': '–í–æ–ª–≥–æ–≥—Ä–∞–¥'},
    {'country': 'üá∑üá∫', 'name': '–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä'},
    {'country': 'üá∑üá∫', 'name': '–°–∞—Ä–∞—Ç–æ–≤'},
    {'country': 'üá∑üá∫', 'name': '–¢—é–º–µ–Ω—å'},
    {'country': 'üá∑üá∫', 'name': '–¢–æ–ª—å—è—Ç—Ç–∏'},
    {'country': 'üá∑üá∫', 'name': '–ò–∂–µ–≤—Å–∫'},
    {'country': 'üá∑üá∫', 'name': '–ë–∞—Ä–Ω–∞—É–ª'},
    {'country': 'üá∑üá∫', 'name': '–£–ª—å—è–Ω–æ–≤—Å–∫'},
    {'country': 'üá∑üá∫', 'name': '–ò—Ä–∫—É—Ç—Å–∫'},
    {'country': 'üá∑üá∫', 'name': '–•–∞–±–∞—Ä–æ–≤—Å–∫'},
    {'country': 'üá∑üá∫', 'name': '–Ø—Ä–æ—Å–ª–∞–≤–ª—å'},
    {'country': 'üá∑üá∫', 'name': '–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫'},
    {'country': 'üá∑üá∫', 'name': '–ú–∞—Ö–∞—á–∫–∞–ª–∞'},
    {'country': 'üá∑üá∫', 'name': '–¢–æ–º—Å–∫'},
    {'country': 'üá∑üá∫', 'name': '–û—Ä–µ–Ω–±—É—Ä–≥'},
    {'country': 'üá∑üá∫', 'name': '–ö–µ–º–µ—Ä–æ–≤–æ'},
    {'country': 'üá∑üá∫', 'name': '–ù–æ–≤–æ–∫—É–∑–Ω–µ—Ü–∫'},
]

CITIES_PER_PAGE = 10

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ (user_id: [ref_ids])
user_referrals = {}

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (user_id: referrer_id)
user_referrers = {}

# –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –∫–∞–∫ –æ–±—ä–µ–∫—Ç–æ–≤
GOODS = [
    {'name': '–ö—Ä–∏—Å—Ç–∞–ª–ª—ã', 'price': 1000},
    {'name': '–ú–æ–Ω–µ—Ç—ã', 'price': 1500},
    {'name': '–≠–Ω–µ—Ä–≥–∏—è', 'price': 2000},
    {'name': '–ë—É—Å—Ç–µ—Ä', 'price': 2500},
    {'name': 'VIP-—Å—Ç–∞—Ç—É—Å', 'price': 3000},
]

# --- –ö–∞—Ç–∞–ª–æ–≥ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏, –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –∏ —Ç–æ–≤–∞—Ä–∞–º–∏ ---
CATALOG_TREE = [
    {
        'name': '–°—Ç–∏–º—É–ª—è—Ç–æ—Ä—ã',
        'subcategories': [
            {
                'name': '–ö–æ–∫–∞–∏–Ω',
                'products': [
                    {
                        'name': 'VHQ –ö–æ–∫–∞–∏–Ω (–ö–æ–ª—É–º–±–∏—è)',
                        'amounts': [{'caption': '1–≥ | 7900‚ÇΩ | –ü—Ä–∏–∫–æ–ø', 'price': 7900}, {'caption': '2–≥ | 15500‚ÇΩ | –ü—Ä–∏–∫–æ–ø', 'price': 15500}, {'caption': '5–≥ | 31000‚ÇΩ | –ú–∞–≥–Ω–∏—Ç', 'price': 31000}],
                        'img': '–∫–æ–∫–∞–∏–Ω.jpg',
                        'description': '–ì–ª—è–Ω–µ—Ü, –∫–∞—á–µ—Å—Ç–≤–æ, –±–ª–∞–∂–µ–Ω—Å—Ç–≤–æ. –†–∞–∑–≤–µ —Å—Ç–æ–∏—Ç –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –º–∏–º–æ —Ç–∞–∫–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞?\n\n–í–ê–ñ–ù–û:\n–ü—Ä–∏ —Å–æ–±–ª—é–¥–µ–Ω–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–π –¥–æ–∑–∏—Ä–æ–≤–∫–∏, –ª–∏—à–Ω–µ–π –º–æ–∫—Ä–æ—Ç—ã –≤ –Ω–æ—Å—É –Ω–µ –±—É–¥–µ—Ç, –∞ –æ—Ç—Ö–æ–¥ –∫–æ —Å–Ω—É –±—É–¥–µ—Ç –ª—ë–≥–∫–∏–º –∏ –ø—Ä–∏—è—Ç–Ω—ã–º —É–∂–µ —á–µ—Ä–µ–∑ —á–∞—Å - –ø–æ–ª—Ç–æ—Ä–∞ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è.',
                        'reviews': [{
                            'name': '–ê–Ω–æ–Ω–∏–º',
                            'stars': 5,
                            'caption': '–æ—Ö—É–µ–Ω–Ω–æ'
                        }]
                    },
                    {
                        'name': '–ö–æ–∫–∞–∏–Ω VHQ FishScale Prada',
                        'amounts': [{'caption': '4–≥ | 39400‚ÇΩ | –¢–∞–π–Ω–∏–∫', 'price': 39400}, {'caption': '5–≥ | 49900‚ÇΩ | –¢–∞–π–Ω–∏–∫', 'price': 49900}, {'caption': '8–≥ | 77000‚ÇΩ | –ú–∞–≥–Ω–∏—Ç', 'price': 77000}],
                        'img': '–∫–æ–∫–∞–∏–Ω2.jpg',
                        'description': '–§–∏—à—Å–∫–µ–π–ª –∏–º–ø–æ—Ä—Ç–Ω–æ–≥–æ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞. –õ—é–±–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ, –≤–µ—á–µ—Ä–∏–Ω–∫–∞ –∏–ª–∏ –∂–µ –Ω–æ—á—å —Ä–æ–º–∞–Ω—Ç–∏–∫–∏ —Å–æ –≤—Ç–æ—Ä–æ–π –ø–æ–ª–æ–≤–∏–Ω–∫–æ–π –∑–∞–∏–≥—Ä–∞—é—Ç –Ω–æ–≤—ã–º–∏ –∫—Ä–∞—Å–∫–∞–º–∏ –≤ –≤–∞—à–∏—Ö –≥–ª–∞–∑–∞—Ö, –æ—Å—Ç–∞–≤–∏–≤ —É–π–º—É –ø—Ä–∏—è—Ç–Ω—ã—Ö –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π. –ü—Ä–∏–∫–æ—Å–Ω–∏—Å—å –∫ –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ–º—É –≤–º–µ—Å—Ç–µ —Å –Ω–∞–º–∏!\n\n–ù–∞–∑–∞–ª—å–Ω–æ - 30-60 –º–≥. –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç –≤ —Å—Ä–µ–¥–Ω–µ–º 3-5 –º–∏–Ω—É—Ç.',
                        'reviews': [{
                            'name': '–ê–Ω–æ–Ω–∏–º',
                            'stars': 5,
                            'caption': '–æ—Ö—É–µ–Ω–Ω–æ'
                        }]
                    },
                    {
                        'name': '–ö–æ–∫–∞–∏–Ω F1 ',
                        'amounts': [{'caption': '1–≥ | 10900‚ÇΩ | –ü—Ä–∏–∫–æ–ø', 'price': 10900}, {'caption': '10–≥ | 89000‚ÇΩ | –¢–∞–π–Ω–∏–∫', 'price': 89000}],
                        'img': '–∫–æ–∫–∞–∏–Ω3.jpg',
                        'description': '–ö–æ–∫–∞–∏–Ω F1 - —ç—Ç–æ –º–æ—â—å —Å–≤–µ—Ä—Ö–±—ã—Å—Ç—Ä—ã—Ö —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã—Ö —Ç–∞—á–µ–∫, –ø—Ä–∏—è—Ç–Ω–∞—è –∫–æ–∫–µ–π–Ω–æ–≤–∞—è —ç–π—Ñ–æ—Ä–∏—è –∏ –≤—ã—Å–æ—á–∞–π—à–∞—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å –∫–ª–∞–¥–æ–≤. –ü—Ä–∏–±–∞–≤—å—Ç–µ –∫ —ç—Ç–æ–º—É –ø–æ–¥–¥–µ—Ä–∂–∫—É —É—Ä–æ–≤–Ω—è ‚Äú–º–µ—á—Ç–∞‚Äù - –∏ –ø–æ–ª—É—á–∏—Ç–µ –ª—É—á—à—É—é –∫–æ–∫–∞–∏–Ω–æ–≤—É—é —Å–¥–µ–ª–∫—É –∏–∑ –≤–æ–∑–º–æ–∂–Ω—ã—Ö!\n\n–ù–∞–¥–æ –æ—Ç–º–µ—Ç–∏—Ç—å, —á—Ç–æ –ø—Ä–æ–¥—É–∫—Ç –Ω–∞—Å—Ç–æ–ª—å–∫–æ —á–∏—Å—Ç—ã–π –∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π, —á—Ç–æ –æ–Ω –∏–¥–µ–∞–ª—å–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –≤–∞—Ä–∫–∏ –∫—Ä–µ–∫–∞ –∫–∞–∫ –Ω–∞ –∞–º–º–∏–∞–∫–µ, —Ç–∞–∫ –∏ –Ω–∞ —Å–æ–¥–µ.',
                        'reviews': [{
                            'name': '–ê–Ω–æ–Ω–∏–º',
                            'stars': 5,
                            'caption': '–æ—Ö—É–µ–Ω–Ω–æ'
                        }]
                    },
                ]
            },
            {
                'name': '–ê–º—Ñ–µ—Ç–∞–º–∏–Ω',
                'products': [
                    {
                        'name': '–ê–º—Ñ–µ—Ç–∞–º–∏–Ω WHITE',
                        'amounts': [{'caption': '5–≥ | 5900‚ÇΩ | –¢–∞–π–Ω–∏–∫', 'price': 5900}, {'caption': '6–≥ | 6500‚ÇΩ | –ü—Ä–∏–∫–æ–ø', 'price': 6500}, {'caption': '10–≥ | 8900‚ÇΩ | –ú–∞–≥–Ω–∏—Ç', 'price': 8900}],
                        'img': '–∞–º—Ñ2.jpg',
                        'description': '–¢–æ–ø–æ–≤–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ. –¶–≤–µ—Ç - –±–µ–ª—ã–π.',
                        'reviews': [{
                            'name': '–ê–Ω–æ–Ω–∏–º',
                            'stars': 5,
                            'caption': '–æ—Ö—É–µ–Ω–Ω–æ'
                        }]
                    },
                    {
                        'name': '–ê–º—Ñ–µ—Ç–∞–º–∏–Ω PREMIUM',
                        'amounts': [{'caption': '3–≥ | 5000‚ÇΩ | –¢–∞–π–Ω–∏–∫', 'price': 5000}, {'caption': '5–≥ | 7800‚ÇΩ | –¢–∞–π–Ω–∏–∫', 'price': 7800}, {'caption': '10–≥ | 14000‚ÇΩ | –ú–∞–≥–Ω–∏—Ç', 'price': 14000}],
                        'img': '–∞–º—Ñ.jpg',
                        'description': '–ü—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ–º –∞–º—Ñ–µ—Ç–∞–º–∏–Ω 99.9% –µ—â–µ —Å —Ç–µ—Ö 2000-—Ö –≥–æ–¥–æ–≤! –õ—É—á—à–∞—è –≤–µ—Ä—Å–∏—è –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–≥–æ —Å—Ç–∏–º—É–ª—è—Ç–æ—Ä–∞ –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ –∏—â–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Å—Ç–∏–º –∏ —ç–π—Ñ–æ—Ä–∏—é! –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–µ —Å—Ç–∏–º—É–ª–∏—Ä—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ –∞–º—Ñ–µ—Ç–∞–º–∏–Ω–∞ –≤—ã—Ä–∞–∂–∞–µ—Ç—Å—è –≤ —É–ª—É—á—à–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è, –ø–æ–≤—ã—à–µ–Ω–∏–∏ –≤–Ω–∏–º–∞–Ω–∏—è –∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –∫ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏, –∞ —Ç–∞–∫–∂–µ –≤ –ø–æ—è–≤–ª–µ–Ω–∏–∏ —á—É–≤—Å—Ç–≤–∞ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –∏ –∫–æ–º—Ñ–æ—Ä—Ç–∞. –ø–æ–≤—ã—à–∞–µ—Ç –¥–≤–∏–≥–∞—Ç–µ–ª—å–Ω—É—é –∏ —Ä–µ—á–µ–≤—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å, —É–º–µ–Ω—å—à–∞–µ—Ç —Å–æ–Ω–ª–∏–≤–æ—Å—Ç—å –∏ –∞–ø–ø–µ—Ç–∏—Ç, –ø–æ–≤—ã—à–∞–µ—Ç —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å. –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ç–æ–ª—å–∫–æ —Ö–∏–º–∏—á–µ—Å–∫–∏ —á–∏—Å—Ç—ã—Ö, –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö —Ä–µ–∞–≥–µ–Ω—Ç–æ–≤ –∏ —Ä–∞—Å—Ç–≤–æ—Ä–∏—Ç–µ–ª–µ–π. –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –ø—Ä–∏—è—Ç–Ω–æ–µ –∏ –¥–æ–ª–≥–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ',
                        'reviews': [{
                            'name': '–ê–Ω–æ–Ω–∏–º',
                            'stars': 5,
                            'caption': '–æ—Ö—É–µ–Ω–Ω–æ'
                        }]
                    }
                ]
            },
            {
                'name': '–ú–µ—Ç–∞–º—Ñ–µ—Ç–∞–º–∏–Ω',
                'products': [
                    {
                        'name': '–ú–µ—Ç–∞–º—Ñ–µ—Ç–∞–º–∏–Ω VHQ+ –î–µ–∫—Å—Ç—Ä–∞',
                        'amounts': [{'caption': '3–≥ | 9900‚ÇΩ | –ú–∞–≥–Ω–∏—Ç', 'price': 9900}, {'caption': '1–≥ | 3500‚ÇΩ | –ú–∞–≥–Ω–∏—Ç', 'price': 3500}, {'caption': '7–≥ | 22700‚ÇΩ | –ú–∞–≥–Ω–∏—Ç', 'price': 22700}],
                        'img': '–∞–º—Ñ.jpg',
                        'description': '–ü—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ–º –∞–º—Ñ–µ—Ç–∞–º–∏–Ω 99.9% –µ—â–µ —Å —Ç–µ—Ö 2000-—Ö –≥–æ–¥–æ–≤! –õ—É—á—à–∞—è –≤–µ—Ä—Å–∏—è –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–≥–æ —Å—Ç–∏–º—É–ª—è—Ç–æ—Ä–∞ –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ –∏—â–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Å—Ç–∏–º –∏ —ç–π—Ñ–æ—Ä–∏—é! –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–µ —Å—Ç–∏–º—É–ª–∏—Ä—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ –∞–º—Ñ–µ—Ç–∞–º–∏–Ω–∞ –≤—ã—Ä–∞–∂–∞–µ—Ç—Å—è –≤ —É–ª—É—á—à–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è, –ø–æ–≤—ã—à–µ–Ω–∏–∏ –≤–Ω–∏–º–∞–Ω–∏—è –∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –∫ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏, –∞ —Ç–∞–∫–∂–µ –≤ –ø–æ—è–≤–ª–µ–Ω–∏–∏ —á—É–≤—Å—Ç–≤–∞ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –∏ –∫–æ–º—Ñ–æ—Ä—Ç–∞. –ø–æ–≤—ã—à–∞–µ—Ç –¥–≤–∏–≥–∞—Ç–µ–ª—å–Ω—É—é –∏ —Ä–µ—á–µ–≤—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å, —É–º–µ–Ω—å—à–∞–µ—Ç —Å–æ–Ω–ª–∏–≤–æ—Å—Ç—å –∏ –∞–ø–ø–µ—Ç–∏—Ç, –ø–æ–≤—ã—à–∞–µ—Ç —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å. –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ç–æ–ª—å–∫–æ —Ö–∏–º–∏—á–µ—Å–∫–∏ —á–∏—Å—Ç—ã—Ö, –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö —Ä–µ–∞–≥–µ–Ω—Ç–æ–≤ –∏ —Ä–∞—Å—Ç–≤–æ—Ä–∏—Ç–µ–ª–µ–π. –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –ø—Ä–∏—è—Ç–Ω–æ–µ –∏ –¥–æ–ª–≥–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ',
                        'reviews': [{
                            'name': '–ê–Ω–æ–Ω–∏–º',
                            'stars': 5,
                            'caption': '–æ—Ö—É–µ–Ω–Ω–æ'
                        }]
                    },
                    {
                        'name': '–ú–µ—Ç–∞–º—Ñ–µ—Ç–∞–º–∏–Ω D-–∏–∑–æ–º–µ—Ä',
                        'amounts': [{'caption': '2–≥ | 27900‚ÇΩ | –ú–∞–≥–Ω–∏—Ç', 'price': 27900}, {'caption': '4–≥ | 53900‚ÇΩ | –ú–∞–≥–Ω–∏—Ç', 'price': 53900}, {'caption': '9–≥ | 109000‚ÇΩ | –ú–∞–≥–Ω–∏—Ç', 'price': 109000}],
                        'img': '–∞–º—Ñ.jpg',
                        'description': '–ú–µ—Ç–∞–º—Ñ–µ—Ç–∞–º–∏–Ω D-–∏–∑–æ–º–µ—Ä –∫–æ—Ç–æ—Ä—ã–π –≤—ã –¥–∞–≤–Ω–æ –∂–¥–∞–ª–∏!',
                        'reviews': [{
                            'name': '–ê–Ω–æ–Ω–∏–º',
                            'stars': 5,
                            'caption': '–æ—Ö—É–µ–Ω–Ω–æ'
                        }]
                    },
                    {
                        'name': '–ú–µ—Ç–∞–º—Ñ–µ—Ç–∞–º–∏–Ω L-–∏–∑–æ–º–µ—Ä',
                        'amounts': [{'caption': '1–≥ | 2300‚ÇΩ | –ü—Ä–∏–∫–æ–ø', 'price': 2300}, {'caption': '6–≥ | 12000‚ÇΩ | –ú–∞–≥–Ω–∏—Ç', 'price': 1200}],
                        'img': '–º–µ—Ç.jpg',
                        'description': '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π —Å—Ç–∏–º—É–ª—è—Ç–æ—Ä —Å —Ö–æ—Ä–æ—à–æ –∏–∑—É—á–µ–Ω–Ω—ã–º –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏–µ–º –Ω–∞ –æ—Ä–≥–∞–Ω–∏–∑–º. –ü—Ä–æ–¥—É–∫—Ç —Å —É–∫–ª–æ–Ω–æ–º –≤ —á–∏—Å—Ç—É—é —Å—Ç–∏–º—É–ª—è—Ü–∏—é, –∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã. –¢–∞–∫–∂–µ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞–∫ –±–æ–ª–µ–µ –¥–æ–ª–≥—É—é –∏ –±–µ–∑–æ–ø–∞—Å–Ω—É—é –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–£ A-PVP. –û—Ç–ª–∏—á–Ω–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—ã—Ä–≤–∞—Ç—å—Å—è –∏–∑ –∞–ø–≤–ø-–º–∞—Ä–∞—Ñ–æ–Ω–∞ –∏ –≤–µ—Ä–Ω—É—Ç—å –∫–æ–Ω—Ç—Ä–æ–ª—å –Ω–∞–¥ —Å–∏—Ç—É–∞—Ü–∏–µ–π, –∫–æ–º—Ñ–æ—Ä—Ç–Ω—ã–µ —Ç—Ä–∏–ø—ã –±–µ–∑ —Å–æ–ª–µ–≤–æ–π —à–∏–∑—ã',
                        'reviews': [{
                            'name': '–ê–Ω–æ–Ω–∏–º',
                            'stars': 5,
                            'caption': '–î–∞–≤–Ω–æ —Ö–æ—Ç–µ–ª –º–µ—Ç! –°–æ–ª—å –∏ –∞–º—Ñ —É–∂–µ –Ω–µ —Ç–µ, —á—Ç–æ –±—ã–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ª–µ—Ç –Ω–∞–∑–∞–¥ –∞ –∞–º—Ñ –∏–∑ –Ω—É–ª–µ–≤—ã—Ö –∏ –Ω–∞—á–∞–ª–∞ –¥–µ—Å—è—Ç—ã—Ö –∏ –≤–æ–æ–±—â–µ –¥—É–º–∞—é —Å–ª–æ–∂–Ω–æ –Ω–∞–π—Ç–∏. –£—Å–ª—ã—à–∞–ª –ø—Ä–æ –ª—ë–¥ –∏ –≤–æ—Ç —á–µ—Ä–µ–∑ –ø–æ–ª—Ç–æ—Ä–∞ –≥–æ–¥–∞ –æ–Ω —É –º–µ–Ω—è. –í–∑—è–ª –Ω–∞ –ø—Ä–æ–±—É –∏–º–µ–Ω–Ω–æ —ç—Ç–æ—Ç, —á—Ç–æ–± –±—ã–ª–æ —Å —á–µ–º —Å—Ä–∞–≤–Ω–∏–≤–∞—Ç—å –ø–æ—Ç–æ–º. –ö–ª–∞–¥ –∏—Å–ø–æ–ª–Ω–µ–Ω –ø—É—à–∫–∞, —Å –ø–µ—Ä–≤–æ–≥–æ —Ä–∞–∑–∞ —è –∏ –Ω–µ –Ω–∞—à—ë–ª, –ø–æ—Å—Ç–æ—è–ª –ø–æ–¥—É–º–∞–ª –∏ –≤–æ—Ç –æ–Ω–∏ –¥–≤–µ –∫–æ–ª–±—ã –≤ –∫–∞—Ä–º–∞–Ω–µ –∞ –¥–æ –¥–æ–º–∞ –∏–∑–Ω—É—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ—á—Ç–∏ —á–µ—Ç—ã—Ä–µ —á–∞—Å–∞... –§–æ—Ç–æ —Å—Ç–∞—Ñ–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É –∫–æ–ª–±üëç . –ù–µ–±–æ–ª—å—à–æ–π –∫—Ä–∏—Å –≤—ã–ø–∏–ª –∏ –ø–æ–ø—Ä–æ–±–æ–≤–∞–ª –∫—É—Ä–∏—Ç—å –ø–æ–∫–∞ –∂–¥–∞–ª –ø—Ä–∏–ª–∏–≤–∞, –°—Ç–∏–º—É–ª—è—Ü–∏—è –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ –µ—Å—Ç—å, –ø–æ–ø—Ä–æ–±–æ–≤–∞–ª –Ω—é—Ö–Ω—É—Ç—å, —Å—Ç–∏–º—É–ª—è—Ü–∏—è –µ—Å—Ç—å –∞ –≤–æ—Ç —Å —ç–π—Ñ–æ–π –ø–æ—Ö–æ–¥—É —Ç—è–∂–µ–ª–æ–≤–∞—Ç–æ  –í–∏–¥–∏–º–æ –Ω–∞–¥–æ –±–æ–ª—å—à–µ –∏–ª–∏ –≤–≤. –±—É–¥—É —Å–µ–π—á–∞—Å –ø–∏—Ç—Ç—å –æ–ø—è—Ç—å. –≤–≤ –Ω–µ —É–º–µ—é... –ë–ª–∞–≥–æ–¥–∞—Ä—é. –ú–æ–∂–µ—Ç –ø–æ–∑–∂–µ –¥–æ–ø–æ–ª–Ω—é, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–æ—Å—å'
                        }]
                    },
                ]
            },
            {
                'name': 'A-PVP –∫—Ä–∏—Å—Ç–∞–ª–ª—ã',
                'products': [
                    {
                        'name': 'A-PVP VHQ',
                        'amounts': [{'caption': '2–≥ | 4100‚ÇΩ | –ü—Ä–∏–∫–æ–ø', 'price': 4100}, {'caption': '5–≥ | 7500‚ÇΩ | –¢–∞–π–Ω–∏–∫', 'price': 7500}, {'caption': '7–≥ | 10700‚ÇΩ | –ú–∞–≥–Ω–∏—Ç', 'price': 10700}],
                        'img': '–∞–ø–≤–ø.jpg',
                        'description': '–ú–∞–∫—Å–∏–º—É–º —ç—Ñ—Ñ–µ–∫—Ç–∞, —ç–π—Ñ–æ—Ä–∏—è –∏ —Å–≤–µ—Ä—Ö—Ç—Ä–µ–∑–≤–æ—Å—Ç—å —É–º–∞ –æ–±–µ—Å–ø–µ—á–µ–Ω—ã. –ë—É–¥—å—Ç–µ –≥–æ—Ç–æ–≤ —É–¥–∏–≤–∏—Ç—å—Å—è –∫–∞—á–µ—Å—Ç–≤—É —ç—Ç–æ–≥–æ –ø—Ä–æ—Å—Ç–æ–≥–æ –∏ –¥–µ–π—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞, –ø–æ–µ—Ö–∞–ª–∏! –ê–ª—å—Ñ–∞ PVP —Å–ø–æ—Å–æ–±—Å—Ç–≤—É–µ—Ç –≤—ã—Ä–∞–±–æ—Ç–∫–µ –Ω–æ—Ä–∞–¥—Ä–µ–Ω–∞–ª–∏–Ω–∞ –∏ –¥–æ—Ñ–∞–º–∏–Ω–∞. –í —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –≤–æ–∑–Ω–∏–∫–∞—é—Ç –∫—Ä–∞–π–Ω–µ —è—Ä–∫–∏–µ –ø—Å–∏—Ö–∏—á–µ—Å–∫–∏–µ —Ä–µ–∞–∫—Ü–∏–∏ (–Ω–µ–æ–±—ã—á–∞–π–Ω–æ–µ —á—É–≤—Å—Ç–≤–æ —Ä–∞–¥–æ—Å—Ç–∏ –∏ –≤–µ—Å–µ–ª—å—è, —Å–∏–ª—å–Ω–æ–µ —Å—Ç–∏–º—É–ª–∏—Ä—É—é—â–∏–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞ –≤–µ—Å—å –æ—Ä–≥–∞–Ω–∏–∑–º) –∏ –Ω–µ–∑–∞–±—ã–≤–∞–µ–º—ã–µ –æ—â—É—â–µ–Ω–∏—è.\n\n–ê–ª—å—Ñ–∞-PVP –ø–æ–≤—ã—à–∞–µ—Ç –≤–∞—à—É —Ñ–∏–∑–∏—á–µ—Å–∫—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å. –ñ–µ–ª–∞–Ω–∏–µ –¥–≤–∏–≥–∞—Ç—å—Å—è, —Ç–∞–Ω—Ü–µ–≤–∞—Ç—å, –Ω–µ —Å—Ç–æ—è—Ç—å –Ω–∞ –º–µ—Å—Ç–µ. –°—Ä–∞–∑—É –ø–æ—Å–ª–µ —É–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –æ–±–æ—Å—Ç—Ä—è–µ—Ç—Å—è —Ç–∞–∫—Ç–∏–ª—å–Ω–æ—Å—Ç—å, –∑—Ä–µ–Ω–∏–µ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —á–µ—Ç–∫–∏–º –∏ –æ—Å—Ç—Ä—ã–º, –ø–æ–≤—ã—à–∞–µ—Ç—Å—è —Å–µ–∫—Å—É–∞–ª—å–Ω–æ–µ –≤–æ–∑–±—É–∂–¥–µ–Ω–∏–µ –∏ –æ–±–æ—Å—Ç—Ä–µ–Ω–Ω–∞—è —Ä–µ–∞–∫—Ü–∏—è –Ω–∞ –ø—Ä–∏–∫–æ—Å–Ω–æ–≤–µ–Ω–∏—è.',
                        'reviews': [{
                            'name': '–ê–Ω–æ–Ω–∏–º',
                            'stars': 5,
                            'caption': '–î–∞–≤–Ω–æ —Ö–æ—Ç–µ–ª –º–µ—Ç! –°–æ–ª—å –∏ –∞–º—Ñ —É–∂–µ –Ω–µ —Ç–µ, —á—Ç–æ –±—ã–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ª–µ—Ç –Ω–∞–∑–∞–¥ –∞ –∞–º—Ñ –∏–∑ –Ω—É–ª–µ–≤—ã—Ö –∏ –Ω–∞—á–∞–ª–∞ –¥–µ—Å—è—Ç—ã—Ö –∏ –≤–æ–æ–±—â–µ –¥—É–º–∞—é —Å–ª–æ–∂–Ω–æ –Ω–∞–π—Ç–∏. –£—Å–ª—ã—à–∞–ª –ø—Ä–æ –ª—ë–¥ –∏ –≤–æ—Ç —á–µ—Ä–µ–∑ –ø–æ–ª—Ç–æ—Ä–∞ –≥–æ–¥–∞ –æ–Ω —É –º–µ–Ω—è. –í–∑—è–ª –Ω–∞ –ø—Ä–æ–±—É –∏–º–µ–Ω–Ω–æ —ç—Ç–æ—Ç, —á—Ç–æ–± –±—ã–ª–æ —Å —á–µ–º —Å—Ä–∞–≤–Ω–∏–≤–∞—Ç—å –ø–æ—Ç–æ–º. –ö–ª–∞–¥ –∏—Å–ø–æ–ª–Ω–µ–Ω –ø—É—à–∫–∞, —Å –ø–µ—Ä–≤–æ–≥–æ —Ä–∞–∑–∞ —è –∏ –Ω–µ –Ω–∞—à—ë–ª, –ø–æ—Å—Ç–æ—è–ª –ø–æ–¥—É–º–∞–ª –∏ –≤–æ—Ç –æ–Ω–∏ –¥–≤–µ –∫–æ–ª–±—ã –≤ –∫–∞—Ä–º–∞–Ω–µ –∞ –¥–æ –¥–æ–º–∞ –∏–∑–Ω—É—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ—á—Ç–∏ —á–µ—Ç—ã—Ä–µ —á–∞—Å–∞... –§–æ—Ç–æ —Å—Ç–∞—Ñ–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É –∫–æ–ª–±üëç . –ù–µ–±–æ–ª—å—à–æ–π –∫—Ä–∏—Å –≤—ã–ø–∏–ª –∏ –ø–æ–ø—Ä–æ–±–æ–≤–∞–ª –∫—É—Ä–∏—Ç—å –ø–æ–∫–∞ –∂–¥–∞–ª –ø—Ä–∏–ª–∏–≤–∞, –°—Ç–∏–º—É–ª—è—Ü–∏—è –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ –µ—Å—Ç—å, –ø–æ–ø—Ä–æ–±–æ–≤–∞–ª –Ω—é—Ö–Ω—É—Ç—å, —Å—Ç–∏–º—É–ª—è—Ü–∏—è –µ—Å—Ç—å –∞ –≤–æ—Ç —Å —ç–π—Ñ–æ–π –ø–æ—Ö–æ–¥—É —Ç—è–∂–µ–ª–æ–≤–∞—Ç–æ  –í–∏–¥–∏–º–æ –Ω–∞–¥–æ –±–æ–ª—å—à–µ –∏–ª–∏ –≤–≤. –±—É–¥—É —Å–µ–π—á–∞—Å –ø–∏—Ç—Ç—å –æ–ø—è—Ç—å. –≤–≤ –Ω–µ —É–º–µ—é... –ë–ª–∞–≥–æ–¥–∞—Ä—é. –ú–æ–∂–µ—Ç –ø–æ–∑–∂–µ –¥–æ–ø–æ–ª–Ω—é, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–æ—Å—å'
                        }]
                    }
                ]
            },
            {
                'name': 'A-PVP –º—É–∫–∞',
                'products': [
                    {
                        'name': 'A-PVP VHQ+',
                        'amounts': [{'caption': '2–≥ | 3300‚ÇΩ | –ú–∞–≥–Ω–∏—Ç', 'price': 3300}, {'caption': '4–≥ | 6500‚ÇΩ | –ü—Ä–∏–∫–æ–ø', 'price': 6500}, {'caption': '10–≥ | 11300‚ÇΩ | –ú–∞–≥–Ω–∏—Ç', 'price': 11300}],
                        'img': '–∞–ø–≤–ø2.jpg',
                        'description': '–ú–∞–∫—Å–∏–º—É–º —ç—Ñ—Ñ–µ–∫—Ç–∞, —ç–π—Ñ–æ—Ä–∏—è –∏ —Å–≤–µ—Ä—Ö—Ç—Ä–µ–∑–≤–æ—Å—Ç—å —É–º–∞ –æ–±–µ—Å–ø–µ—á–µ–Ω—ã. –ë—É–¥—å—Ç–µ –≥–æ—Ç–æ–≤ —É–¥–∏–≤–∏—Ç—å—Å—è –∫–∞—á–µ—Å—Ç–≤—É —ç—Ç–æ–≥–æ –ø—Ä–æ—Å—Ç–æ–≥–æ –∏ –¥–µ–π—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞, –ø–æ–µ—Ö–∞–ª–∏! –ê–ª—å—Ñ–∞ PVP —Å–ø–æ—Å–æ–±—Å—Ç–≤—É–µ—Ç –≤—ã—Ä–∞–±–æ—Ç–∫–µ –Ω–æ—Ä–∞–¥—Ä–µ–Ω–∞–ª–∏–Ω–∞ –∏ –¥–æ—Ñ–∞–º–∏–Ω–∞. –í —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –≤–æ–∑–Ω–∏–∫–∞—é—Ç –∫—Ä–∞–π–Ω–µ —è—Ä–∫–∏–µ –ø—Å–∏—Ö–∏—á–µ—Å–∫–∏–µ —Ä–µ–∞–∫—Ü–∏–∏ (–Ω–µ–æ–±—ã—á–∞–π–Ω–æ–µ —á—É–≤—Å—Ç–≤–æ —Ä–∞–¥–æ—Å—Ç–∏ –∏ –≤–µ—Å–µ–ª—å—è, —Å–∏–ª—å–Ω–æ–µ —Å—Ç–∏–º—É–ª–∏—Ä—É—é—â–∏–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞ –≤–µ—Å—å –æ—Ä–≥–∞–Ω–∏–∑–º) –∏ –Ω–µ–∑–∞–±—ã–≤–∞–µ–º—ã–µ –æ—â—É—â–µ–Ω–∏—è.\n\n–ê–ª—å—Ñ–∞-PVP –ø–æ–≤—ã—à–∞–µ—Ç –≤–∞—à—É —Ñ–∏–∑–∏—á–µ—Å–∫—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å. –ñ–µ–ª–∞–Ω–∏–µ –¥–≤–∏–≥–∞—Ç—å—Å—è, —Ç–∞–Ω—Ü–µ–≤–∞—Ç—å, –Ω–µ —Å—Ç–æ—è—Ç—å –Ω–∞ –º–µ—Å—Ç–µ. –°—Ä–∞–∑—É –ø–æ—Å–ª–µ —É–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –æ–±–æ—Å—Ç—Ä—è–µ—Ç—Å—è —Ç–∞–∫—Ç–∏–ª—å–Ω–æ—Å—Ç—å, –∑—Ä–µ–Ω–∏–µ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —á–µ—Ç–∫–∏–º –∏ –æ—Å—Ç—Ä—ã–º, –ø–æ–≤—ã—à–∞–µ—Ç—Å—è —Å–µ–∫—Å—É–∞–ª—å–Ω–æ–µ –≤–æ–∑–±—É–∂–¥–µ–Ω–∏–µ –∏ –æ–±–æ—Å—Ç—Ä–µ–Ω–Ω–∞—è —Ä–µ–∞–∫—Ü–∏—è –Ω–∞ –ø—Ä–∏–∫–æ—Å–Ω–æ–≤–µ–Ω–∏—è.',
                        'reviews': [{
                            'name': '–ê–Ω–æ–Ω–∏–º',
                            'stars': 5,
                            'caption': '–î–∞–≤–Ω–æ —Ö–æ—Ç–µ–ª –º–µ—Ç! –°–æ–ª—å –∏ –∞–º—Ñ —É–∂–µ –Ω–µ —Ç–µ, —á—Ç–æ –±—ã–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ª–µ—Ç –Ω–∞–∑–∞–¥ –∞ –∞–º—Ñ –∏–∑ –Ω—É–ª–µ–≤—ã—Ö –∏ –Ω–∞—á–∞–ª–∞ –¥–µ—Å—è—Ç—ã—Ö –∏ –≤–æ–æ–±—â–µ –¥—É–º–∞—é —Å–ª–æ–∂–Ω–æ –Ω–∞–π—Ç–∏. –£—Å–ª—ã—à–∞–ª –ø—Ä–æ –ª—ë–¥ –∏ –≤–æ—Ç —á–µ—Ä–µ–∑ –ø–æ–ª—Ç–æ—Ä–∞ –≥–æ–¥–∞ –æ–Ω —É –º–µ–Ω—è. –í–∑—è–ª –Ω–∞ –ø—Ä–æ–±—É –∏–º–µ–Ω–Ω–æ —ç—Ç–æ—Ç, —á—Ç–æ–± –±—ã–ª–æ —Å —á–µ–º —Å—Ä–∞–≤–Ω–∏–≤–∞—Ç—å –ø–æ—Ç–æ–º. –ö–ª–∞–¥ –∏—Å–ø–æ–ª–Ω–µ–Ω –ø—É—à–∫–∞, —Å –ø–µ—Ä–≤–æ–≥–æ —Ä–∞–∑–∞ —è –∏ –Ω–µ –Ω–∞—à—ë–ª, –ø–æ—Å—Ç–æ—è–ª –ø–æ–¥—É–º–∞–ª –∏ –≤–æ—Ç –æ–Ω–∏ –¥–≤–µ –∫–æ–ª–±—ã –≤ –∫–∞—Ä–º–∞–Ω–µ –∞ –¥–æ –¥–æ–º–∞ –∏–∑–Ω—É—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ—á—Ç–∏ —á–µ—Ç—ã—Ä–µ —á–∞—Å–∞... –§–æ—Ç–æ —Å—Ç–∞—Ñ–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É –∫–æ–ª–±üëç . –ù–µ–±–æ–ª—å—à–æ–π –∫—Ä–∏—Å –≤—ã–ø–∏–ª –∏ –ø–æ–ø—Ä–æ–±–æ–≤–∞–ª –∫—É—Ä–∏—Ç—å –ø–æ–∫–∞ –∂–¥–∞–ª –ø—Ä–∏–ª–∏–≤–∞, –°—Ç–∏–º—É–ª—è—Ü–∏—è –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ –µ—Å—Ç—å, –ø–æ–ø—Ä–æ–±–æ–≤–∞–ª –Ω—é—Ö–Ω—É—Ç—å, —Å—Ç–∏–º—É–ª—è—Ü–∏—è –µ—Å—Ç—å –∞ –≤–æ—Ç —Å —ç–π—Ñ–æ–π –ø–æ—Ö–æ–¥—É —Ç—è–∂–µ–ª–æ–≤–∞—Ç–æ  –í–∏–¥–∏–º–æ –Ω–∞–¥–æ –±–æ–ª—å—à–µ –∏–ª–∏ –≤–≤. –±—É–¥—É —Å–µ–π—á–∞—Å –ø–∏—Ç—Ç—å –æ–ø—è—Ç—å. –≤–≤ –Ω–µ —É–º–µ—é... –ë–ª–∞–≥–æ–¥–∞—Ä—é. –ú–æ–∂–µ—Ç –ø–æ–∑–∂–µ –¥–æ–ø–æ–ª–Ω—é, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–æ—Å—å'
                        }]
                    },
                    {
                        'name': '–ê–ª—å—Ñ–∞ –ø—É–¥—Ä–∞ Cloud',
                        'amounts': [{'caption': '3–≥ | 3900‚ÇΩ | –ü—Ä–∏–∫–æ–ø', 'price': 3900}, {'caption': '4–≥ | 4800‚ÇΩ | –¢–∞–π–Ω–∏–∫', 'price': 4800}, {'caption': '8–≥ | 8900‚ÇΩ | –ü—Ä–∏–∫–æ–ø', 'price': 8900}],
                        'img': '–∞–ø–≤–ø3.jpg',
                        'description': '–ú–∞–∫—Å–∏–º—É–º —ç—Ñ—Ñ–µ–∫—Ç–∞, —ç–π—Ñ–æ—Ä–∏—è –∏ —Å–≤–µ—Ä—Ö—Ç—Ä–µ–∑–≤–æ—Å—Ç—å —É–º–∞ –æ–±–µ—Å–ø–µ—á–µ–Ω—ã. –ë—É–¥—å—Ç–µ –≥–æ—Ç–æ–≤ —É–¥–∏–≤–∏—Ç—å—Å—è –∫–∞—á–µ—Å—Ç–≤—É —ç—Ç–æ–≥–æ –ø—Ä–æ—Å—Ç–æ–≥–æ –∏ –¥–µ–π—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞, –ø–æ–µ—Ö–∞–ª–∏! –ê–ª—å—Ñ–∞ PVP —Å–ø–æ—Å–æ–±—Å—Ç–≤—É–µ—Ç –≤—ã—Ä–∞–±–æ—Ç–∫–µ –Ω–æ—Ä–∞–¥—Ä–µ–Ω–∞–ª–∏–Ω–∞ –∏ –¥–æ—Ñ–∞–º–∏–Ω–∞. –í —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –≤–æ–∑–Ω–∏–∫–∞—é—Ç –∫—Ä–∞–π–Ω–µ —è—Ä–∫–∏–µ –ø—Å–∏—Ö–∏—á–µ—Å–∫–∏–µ —Ä–µ–∞–∫—Ü–∏–∏ (–Ω–µ–æ–±—ã—á–∞–π–Ω–æ–µ —á—É–≤—Å—Ç–≤–æ —Ä–∞–¥–æ—Å—Ç–∏ –∏ –≤–µ—Å–µ–ª—å—è, —Å–∏–ª—å–Ω–æ–µ —Å—Ç–∏–º—É–ª–∏—Ä—É—é—â–∏–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞ –≤–µ—Å—å –æ—Ä–≥–∞–Ω–∏–∑–º) –∏ –Ω–µ–∑–∞–±—ã–≤–∞–µ–º—ã–µ –æ—â—É—â–µ–Ω–∏—è.\n\n–ê–ª—å—Ñ–∞-PVP –ø–æ–≤—ã—à–∞–µ—Ç –≤–∞—à—É —Ñ–∏–∑–∏—á–µ—Å–∫—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å. –ñ–µ–ª–∞–Ω–∏–µ –¥–≤–∏–≥–∞—Ç—å—Å—è, —Ç–∞–Ω—Ü–µ–≤–∞—Ç—å, –Ω–µ —Å—Ç–æ—è—Ç—å –Ω–∞ –º–µ—Å—Ç–µ. –°—Ä–∞–∑—É –ø–æ—Å–ª–µ —É–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –æ–±–æ—Å—Ç—Ä—è–µ—Ç—Å—è —Ç–∞–∫—Ç–∏–ª—å–Ω–æ—Å—Ç—å, –∑—Ä–µ–Ω–∏–µ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —á–µ—Ç–∫–∏–º –∏ –æ—Å—Ç—Ä—ã–º, –ø–æ–≤—ã—à–∞–µ—Ç—Å—è —Å–µ–∫—Å—É–∞–ª—å–Ω–æ–µ –≤–æ–∑–±—É–∂–¥–µ–Ω–∏–µ –∏ –æ–±–æ—Å—Ç—Ä–µ–Ω–Ω–∞—è —Ä–µ–∞–∫—Ü–∏—è –Ω–∞ –ø—Ä–∏–∫–æ—Å–Ω–æ–≤–µ–Ω–∏—è.',
                    }
                ]
            },
        ]
    },
    {
        'name': '–ü—Å–∏—Ö–æ–¥–µ–ª–∏–∫–∏',
        'subcategories': [
            {
                'name': '–ì—Ä–∏–±—ã –õ–°–î',
                'products': [
                    {
                        'name': '–ü—Å–∏–ª–æ—Ü–∏–±–∏–Ω–æ–≤—ã–µ –≥—Ä–∏–±—ã Golden teacher',
                        'amounts': [{'caption': '6–≥ | 4400‚ÇΩ | –ú–∞–≥–Ω–∏—Ç', 'price': 4400}, {'caption': '7–≥ | 4900‚ÇΩ | –ú–∞–≥–Ω–∏—Ç', 'price': 4900}, {'caption': '9–≥ | 5700‚ÇΩ | –ú–∞–≥–Ω–∏—Ç', 'price': 5700}],
                        'img': '–≥—Ä–∏–±—ã.jpg',
                        'description': ''
                    },
                    {
                        'name': '–ì—Ä–∏–±—ã Lizard King',
                        'amounts': [{'caption': '5–≥ | 2400‚ÇΩ | –¢–∞–π–Ω–∏–∫', 'price': 2400}, {'caption': '10–≥ | 9000‚ÇΩ | –ú–∞–≥–Ω–∏—Ç', 'price': 9000}],
                        'img': '–≥—Ä–∏–±—ã2.jpg',
                        'description': ''
                    },
                    {
                        'name': '–ì—Ä–∏–±—ã Lipa Thai',
                        'amounts': [{'caption': '100–≥ | 29900‚ÇΩ | –ü—Ä–∏–∫–æ–ø', 'price': 29900}],
                        'img': '–≥—Ä–∏–±—ã3.jpg',
                        'description': ''
                    },
                ]
            }
        ]
    },
    {
        'name': '–≠–π—Ñ–æ—Ä–µ—Ç–∏–∫–∏',
        'subcategories': [
            {
                'name': '–≠–∫—Å—Ç–∞–∑–∏',
                'products': [
                    {
                        'name': '–≠–∫—Å—Ç–∞–∑–∏ AUDI',
                        'amounts': [{'caption': '1—à—Ç | 1600‚ÇΩ | –ü—Ä–∏–∫–æ–ø', 'price': 1600}, {'caption': '2—à—Ç | 2900‚ÇΩ | –¢–∞–π–Ω–∏–∫', 'price': 2900}, {'caption': '6—à—Ç | 7700‚ÇΩ | –ü—Ä–∏–∫–æ–ø', 'price': 7700}],
                        'img': '—ç–∫—Å—Ç–∞–∑–∏–∞—É–¥–∏.jpg',
                        'description': ''
                    },
                    {
                        'name': '–≠–∫—Å—Ç–∞–∑–∏ Louis Vuitton',
                        'amounts': [{'caption': '5—à—Ç | 4900‚ÇΩ | –¢–∞–π–Ω–∏–∫', 'price': 4900}, {'caption': '7—à—Ç | 6700‚ÇΩ | –ú–∞–≥–Ω–∏—Ç', 'price': 6700}],
                        'img': '—ç–∫—Å—Ç–∞–∑–∏–ª–≤.jpg',
                        'description': ''
                    }
                ]
            },
            {
                'name': 'MDMA',
                'products': [
                    {
                        'name': 'MDMA –ù–∏–¥–µ—Ä–ª–∞–Ω–¥—ã',
                        'amounts': [{'caption': '4–≥ | 12100‚ÇΩ | –¢–∞–π–Ω–∏–∫', 'price': 12100}, {'caption': '5–≥ | 13900‚ÇΩ | –ú–∞–≥–Ω–∏—Ç', 'price': 13900}, {'caption': '7–≥ | 18900‚ÇΩ | –ú–∞–≥–Ω–∏—Ç', 'price': 18900}],
                        'img': '—ç–∫—Å—Ç–∞–∑–∏–ª–≤.jpg',
                        'description': ''
                    },
                    {
                        'name': 'MDMA WHITE',
                        'amounts': [{'caption': '3–≥ | 7900‚ÇΩ | –¢–∞–π–Ω–∏–∫', 'price': 7900}, {'caption': '6–≥ | 14400‚ÇΩ | –ü—Ä–∏–∫–æ–ø', 'price': 14400}, {'caption': '9–≥ | 19600‚ÇΩ | –¢–∞–π–Ω–∏–∫', 'price': 19600}],
                        'img': '–º–¥–º–∞2.jpg',
                        'description': '–ß–∏—Å—Ç—ã–µ –∫—Ä–∏—Å—Ç–∞–ª–ª—ã –ª—é–±–≤–∏ –±–µ–∑ –ø—Ä–∏–º–µ—Å–µ–π –∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–æ–≤. –ü–æ–¥–∞—Ä–∏—Ç –í–∞–º –æ—â—É—â–µ–Ω–∏–µ —ç–π—Ñ–æ—Ä–∏–∏ –∏ –±–µ–∑–∑–∞–±–æ—Ç–Ω–æ—Å—Ç—å, –∂–µ–ª–∞–Ω–∏–µ –æ–±—â–∞—Ç—å—Å—è, –æ–ø–∏—Ä–∞—è—Å—å –Ω–∞ —É–≤–µ—Ä–µ–Ω–Ω–æ–µ —á—É–≤—Å—Ç–≤–æ —Å–∞–º–æ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç–∏ —É–±–µ—Ä–µ—Ç –ª—é–±—É—é —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç—å, –æ—â—É—â–µ–Ω–∏–µ –¥–æ–≤–µ—Ä–∏—è –∫ –æ–∫—Ä—É–∂–∞—é—â–∏–º –ø–æ–∑–≤–æ–ª–∏—Ç –ª–µ–≥–∫–æ –∏ —Å–≤–æ–±–æ–Ω–æ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à–∏ —á—É–≤—Å—Ç–≤–∞ –∏ –∂–µ–ª–∞–Ω–∏—è, –∞ –ø–æ–≤—ã—à–µ–Ω–Ω–∞—è —Ö–∞—Ä–∏–∑–º–∞ —Å–ø—Ä–æ–µ—Ü–∏—Ä—É–µ—Ç –≤–∞—à–µ —á—É–≤—Å—Ç–≤–æ –ª—é–±–≤–∏ –∏ —ç–º–ø–∞—Ç–∏–∏ –Ω–∞ –≤–∞—Å —Å–∞–º–∏—Ö, –ø—Ä–∏–Ω–æ—Å—è —É–º–∏—Ä–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ –∏ –ø—Ä–∏–Ω—è—Ç–∏–µ —Å–µ–±—è –∏ –æ–∫—Ä—É–∂–∞—é—â–∏—Ö.'
                    },
                    {
                        'name': 'MDMA –ö—Ä–∏—Å—Ç–∞–ª–ª—ã Molly VHQ',
                        'amounts': [{'caption': '1–≥ | 3800‚ÇΩ | –ü—Ä–∏–∫–æ–ø', 'price': 3800}, {'caption': '3–≥ | 9600‚ÇΩ | –ü—Ä–∏–∫–æ–ø', 'price': 9600}, {'caption': '8–≥ | 24400‚ÇΩ | –ú–∞–≥–Ω–∏—Ç', 'price': 24400}],
                        'img': '–º–¥–º–∞.jpg',
                        'description': '–ö—Ä–∏—Å—Ç–∞–ª–ª —á—É–¥–µ—Å–Ω—ã–π, –≤–æ–ª—à–µ–±—Å—Ç–≤–æ –≤ —Å–µ–±–µ —Ç–∞–∏—Ç, —Å–∏–ª—É —ç–π—Ñ–æ—Ä–µ—Ç–∏—á–µ—Å–∫—É—é –¥–∞ –ª—é–±–æ–≤–Ω—É—é –¥–∞—Ä—É–µ—Ç. –•–æ—Ä–æ—à –¥–ª—è —É—Ç–µ—Ö –ª—é–±–æ–≤–Ω—ã—Ö, –¥–∞ –≤—Ä–µ–º–µ–Ω–∏ —Ö–æ—Ä–æ—à–µ–≥–æ –ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏—è –≤ –∫–æ–º–ø–∞–Ω–∏–∏ –∞–ª–∏ –±–µ–∑. –•–æ—Ä–æ—à –¥–ª—è –ø–æ—Ç–µ—Ö —Ç–∞–Ω—Ü–µ–≤–∞–ª—å–Ω—ã—Ö —Ä–∞–≤–Ω–æ –∫–∞–∫ –∏ –¥–ª—è –ª–µ–∂–∞–Ω–∏—è –≤–æ –ø–æ–¥—É—à–∫–∞—Ö –¥–∞ –ø–µ—Ä–∏–Ω–∞—Ö –º—è–≥–∫–∏—Ö.'
                    }
                ]
            },
            {
                'name': '–ú–µ—Ñ–µ–¥—Ä–æ–Ω –∫—Ä–∏—Å—Ç–∞–ª–ª—ã',
                'products': [
                    {
                        'name': '–ú–µ—Ñ–µ–¥—Ä–æ–Ω PREMIUM',
                        'amounts': [{'caption': '4–≥ | 5400‚ÇΩ | –¢–∞–π–Ω–∏–∫', 'price': 5400}, {'caption': '7–≥ | 8100‚ÇΩ | –ü—Ä–∏–∫–æ–ø', 'price': 8100}, {'caption': '10–≥ | 11300‚ÇΩ | –¢–∞–π–Ω–∏–∫', 'price': 11300}]
                    },
                    {
                        'name': '–ú–µ—Ñ–µ–¥—Ä–æ–Ω –∫—Ä–∏—Å—Ç–∞–ª–ª—ã VHQ',
                        'amounts': [{'caption': '2–≥ | 3900‚ÇΩ | –¢–∞–π–Ω–∏–∫', 'price': 3900}, {'caption': '5–≥ | 8000‚ÇΩ | –ü—Ä–∏–∫–æ–ø', 'price': 8000}, {'caption': '9–≥ | 11600‚ÇΩ | –ú–∞–≥–Ω–∏—Ç', 'price': 11600}]
                    }
                ]
            },
            {
                'name': '–ú–µ—Ñ–µ–¥—Ä–æ–Ω –º—É–∫–∞',
                'products': [
                    {
                        'name': '–ú–µ—Ñ–µ–¥—Ä–æ–Ω –º—É–∫–∞ VHQ',
                        'amounts': [{'caption': '1–≥ | 1400‚ÇΩ | –ü—Ä–∏–∫–æ–ø', 'price': 1400}, {'caption': '2–≥ | 2500‚ÇΩ | –ü—Ä–∏–∫–æ–ø', 'price': 2500}, {'caption': '10–≥ | 10200‚ÇΩ | –¢–∞–π–Ω–∏–∫', 'price': 10200}]
                    },
                    {
                        'name': '–ú–µ—Ñ–µ–¥—Ä–æ–Ω –º—É–∫–∞ VIP VHQ',
                        'amounts': [{'caption': '3–≥ | 4500‚ÇΩ | –¢–∞–π–Ω–∏–∫', 'price': 4500}, {'caption': '8–≥ | 8900‚ÇΩ | –ú–∞–≥–Ω–∏—Ç', 'price': 8900}, {'caption': '10–≥ | 10500‚ÇΩ | –ú–∞–≥–Ω–∏—Ç', 'price': 10500}]
                    }
                ]
            },
        ]
    },
     {
                'name': '–ú–∞—Ä–∏—Ö—É–∞–Ω–∞',
                'subcategories': [
                    {
                        'name': '–ì–∞—à–∏—à',
                        'products': [
                        {
                            'name': '–ì–∞—à–∏—à ICE-O-LATOR ORANGE',
                            'amounts': [{'caption': '1–≥ | 2100‚ÇΩ | –¢–∞–π–Ω–∏–∫', 'price': 2100}, {'caption': '2–≥ | 3500‚ÇΩ | –ü—Ä–∏–∫–æ–ø', 'price': 3500}, {'caption': '8–≥ | 9800‚ÇΩ | –¢–∞–π–Ω–∏–∫', 'price': 9800}]
                        },
                        {
                            'name': '–ì–∞—à–∏—à ICE-O-LATOR Gorilla Glue',
                            'amounts': [{'caption': '3–≥ | 3800‚ÇΩ | –ú–∞–≥–Ω–∏—Ç', 'price': 3800}, {'caption': '6–≥ | 6900‚ÇΩ | –ú–∞–≥–Ω–∏—Ç', 'price': 6900}]
                        },
                        {
                            'name': 'HASH Bolivia',
                            'amounts': [{'caption': '1–≥ | 1800‚ÇΩ | –ü—Ä–∏–∫–æ–ø', 'price': 1800}, {'caption': '2–≥ | 3200‚ÇΩ | –ü—Ä–∏–∫–æ–ø', 'price': 3200}, {'caption': '10–≥ | 11200‚ÇΩ | –ü—Ä–∏–∫–æ–ø', 'price': 11200}]
                        },
                    ]
                    },
                    {
                        'name': '–®–∏—à–∫–∏',
                        'products': [
                        {
                            'name': '–®–∏—à–∫–∏ White Widow',
                            'amounts': [{'caption': '1–≥ | 2100‚ÇΩ | –¢–∞–π–Ω–∏–∫', 'price': 2100}, {'caption': '4–≥ | 7600‚ÇΩ | –ü—Ä–∏–∫–æ–ø', 'price': 7600}, {'caption': '7–≥ | 12100‚ÇΩ | –¢–∞–π–Ω–∏–∫', 'price': 12100}]
                        },
                        {
                            'name': '–ë–æ—à–µ—á–∫–∏ –ê–ö-47',
                            'amounts': [{'caption': '4–≥ | 7200‚ÇΩ | –ú–∞–≥–Ω–∏—Ç', 'price': 7200}, {'caption': '6–≥ | 9900‚ÇΩ | –¢–∞–π–Ω–∏–∫', 'price': 9900}, {'caption': '10–≥ | 17500‚ÇΩ | –ú–∞–≥–Ω–∏—Ç', 'price': 17500}]
                        },
                        {
                            'name': '–®–∏—à–∫–∏ Mimosa Evo +',
                            'amounts': [{'caption': '3–≥ | 5300‚ÇΩ | –ü—Ä–∏–∫–æ–ø', 'price': 5300}, {'caption': '6–≥ | 10500‚ÇΩ | –¢–∞–π–Ω–∏–∫', 'price': 10500}, {'caption': '8–≥ | 13900‚ÇΩ | –ú–∞–≥–Ω–∏—Ç', 'price': 13900}]
                        },
                    ]
                    },
                    {
                        'name': '–ü–ª–∞–Ω',
                        'products': [
                        {
                            'name': '–¢—Ä–∏–º Blue Sunset Sherbert',
                            'amounts': [{'caption': '2–≥ | 1200‚ÇΩ | –ü—Ä–∏–∫–æ–ø', 'price': 1200}, {'caption': '5–≥ | 4400‚ÇΩ | –ü—Ä–∏–∫–æ–ø', 'price': 4400}, {'caption': '9–≥ | 7700‚ÇΩ | –ú–∞–≥–Ω–∏—Ç', 'price': 7700}]
                        },
                        {
                            'name': '–¢—Ä–∏–º Caramelo',
                            'amounts': [{'caption': '1–≥ | 850‚ÇΩ | –¢–∞–π–Ω–∏–∫', 'price': 850}, {'caption': '3–≥ | 2500‚ÇΩ | –¢–∞–π–Ω–∏–∫', 'price': 2500}, {'caption': '7–≥ | 5800‚ÇΩ | –ü—Ä–∏–∫–æ–ø', 'price': 5800}]
                        }
                    ]
                    },
                ]
            },
]

# FSM –¥–ª—è –∫–∞—Ç–∞–ª–æ–≥–∞ –∏ –∫–æ—Ä–∑–∏–Ω—ã
user_catalog_state = {}
user_cart = {}
# –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –≤–≤–æ–¥–∞ –∞–¥—Ä–µ—Å–∞
user_states = {}

# --- –ö–∞—Ç–∞–ª–æ–≥: –∫–æ—Ä–µ–Ω—å ---
def get_category_markup(path):
    markup = types.InlineKeyboardMarkup(row_width=1)
    node = get_catalog_node(path)
    # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏, –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏, —Ç–æ–≤–∞—Ä—ã
    if 'subcategories' in node:
        for i, subcat in enumerate(node['subcategories']):
            markup.add(types.InlineKeyboardButton(subcat['name'], callback_data=f'cat:{path_str(path+["subcategories",i])}'))
    if 'products' in node:
        for i, prod in enumerate(node['products']):
            markup.add(types.InlineKeyboardButton(f"{prod['name']}", callback_data=f'prod:{path_str(path+["products",i])}'))
    if not ('subcategories' in node or 'products' in node):
        for i, cat in enumerate(CATALOG_TREE):
            markup.add(types.InlineKeyboardButton(cat['name'], callback_data=f'cat:{i}'))
    # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
    if path:
        markup.add(types.InlineKeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data=f'back:{path_str(path)}'))
    return markup

def get_catalog_node(path):
    node = {'subcategories': CATALOG_TREE}
    for p in path:
        if isinstance(p, str) and p == 'subcategories':
            node = node['subcategories']
        elif isinstance(p, str) and p == 'products':
            node = node['products']
        else:
            node = node[p]
    return node

def path_str(path):
    return ','.join(str(x) for x in path)

def path_from_str(s):
    if not s:
        return []
    return [int(x) if x.isdigit() else x for x in s.split(',')]

@bot.message_handler(commands=['start'])
def start(message):
    args = message.text.split()
    user_id = str(message.from_user.id)
    username = message.from_user.first_name
    referrer_id = None
    if len(args) > 1:
        referrer_id = args[1]
    is_new_user = user_id not in user_referrers
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–æ–≤—ã–π –∏ –µ—Å—Ç—å —Ä–µ—Ñ–µ—Ä–µ—Ä, –∑–∞–ø–∏—Å—ã–≤–∞–µ–º
    if is_new_user and referrer_id and referrer_id != user_id:
        user_referrers[user_id] = referrer_id
        # –î–æ–±–∞–≤–ª—è–µ–º –∫ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º
        user_referrals.setdefault(referrer_id, []).append(user_id)
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞ —Å—Å—ã–ª–∫–∏
        try:
            bot.send_message(referrer_id, f'–£ –≤–∞—Å –Ω–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª: {username} (id: {user_id})!')
        except Exception:
            pass
    elif not is_new_user and referrer_id and referrer_id != user_id:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –±—ã–ª
        try:
            bot.send_message(user_id, '–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ!')
            bot.send_message(referrer_id, f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} (id: {user_id}) —É–∂–µ –±—ã–ª –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω —Ä–∞–Ω–µ–µ!')
        except Exception:
            pass
    markup = types.InlineKeyboardMarkup()
    btn = types.InlineKeyboardButton('–í—ã–±—Ä–∞—Ç—å –≥–æ—Ä–æ–¥', callback_data='choose_city:0')
    markup.add(btn)
    with open('welcome.png', 'rb') as photo:
        bot.send_photo(
            message.chat.id,
            photo,
            caption=f'–ü—Ä–∏–≤–µ—Ç, {username}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥.',
            reply_markup=markup
        )

def get_cities_markup(page=0):
    markup = types.InlineKeyboardMarkup(row_width=2)
    start = page * CITIES_PER_PAGE
    end = start + CITIES_PER_PAGE
    cities = CITIES[start:end]
    for i in range(0, len(cities), 2):
        row = []
        for j in range(2):
            if i + j < len(cities):
                city = cities[i + j]
                row.append(types.InlineKeyboardButton(f"{city['country']} {city['name']}", callback_data=f"city_{city['name']}"))
        markup.row(*row)
    nav_buttons = []
    if page > 0:
        nav_buttons.append(types.InlineKeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data=f'choose_city:{page-1}'))
    if end < len(CITIES):
        nav_buttons.append(types.InlineKeyboardButton('–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è', callback_data=f'choose_city:{page+1}'))
    if nav_buttons:
        markup.row(*nav_buttons)
    return markup

@bot.callback_query_handler(func=lambda call: call.data.startswith('choose_city'))
def choose_city(call):
    page = 0
    if ':' in call.data:
        try:
            page = int(call.data.split(':')[1])
        except:
            page = 0
    bot.answer_callback_query(call.id)
    # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–º–µ–Ω–∏—Ç—å —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫–∏, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ
    try:
        bot.edit_message_reply_markup(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            reply_markup=get_cities_markup(page)
        )
    except Exception:
        # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ), —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
        try:
            bot.delete_message(call.message.chat.id, call.message.message_id)
        except Exception:
            pass
        bot.send_message(
            call.message.chat.id,
            '–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:',
            reply_markup=get_cities_markup(page)
        )

@bot.callback_query_handler(func=lambda call: call.data.startswith('city_'))
def city_selected(call):
    city_name = call.data[5:]
    bot.answer_callback_query(call.id, text=f'–í—ã –≤—ã–±—Ä–∞–ª–∏: {city_name}')
    # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –≤—ã–±–æ—Ä–µ –≥–æ—Ä–æ–¥–∞ —Å –º–µ–Ω—é
    menu = types.ReplyKeyboardMarkup(resize_keyboard=True)
    menu.row('üë§ –ü—Ä–æ—Ñ–∏–ª—å', 'üë• –†–µ—Ñ–µ—Ä–∞–ª—ã')
    menu.row('üí¨ –°–≤—è–∑—å', 'üîÑ –ü–æ–º–µ–Ω—è—Ç—å –≥–æ—Ä–æ–¥')
    menu.row('üõí –ö–∞—Ç–∞–ª–æ–≥')
    bot.send_message(call.message.chat.id, f'–ì–æ—Ä–æ–¥ {city_name} —É—Å–ø–µ—à–Ω–æ –≤—ã–±—Ä–∞–Ω!', reply_markup=menu)
    # –ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –∫–∞—Ç–∞–ª–æ–≥–∞ —Å –ø–æ–¥–ø–∏—Å—å—é –∏ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞–º–∏
    catalogue_root(call.message)

@bot.message_handler(commands=['catalogue'])
@bot.message_handler(func=lambda message: message.text == 'üõí –ö–∞—Ç–∞–ª–æ–≥')
def catalogue_root(message):
    user_catalog_state[message.from_user.id] = []
    markup = get_category_markup([])
    with open('catalogue.png', 'rb') as photo:
        bot.send_photo(
            message.chat.id,
            photo,
            caption='–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:',
            reply_markup=markup
        )

@bot.callback_query_handler(func=lambda call: call.data.startswith('cat:'))
def catalogue_category(call):
    path = path_from_str(call.data[4:])
    user_catalog_state[call.from_user.id] = path
    markup = get_category_markup(path)
    # Update caption based on level: root shows prompt, deeper shows category name
    caption_text = '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:' if not path else get_catalog_node(path).get('name', '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:')
    bot.edit_message_caption(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        caption=caption_text,
        reply_markup=markup
    )
    bot.answer_callback_query(call.id)

@bot.callback_query_handler(func=lambda call: call.data.startswith('back:'))
def catalogue_back(call):
    path = path_from_str(call.data[5:])
    # Determine new path: root clears, else go up one level
    if not path:
        new_path = []
    else:
        new_path = path[:-2] if isinstance(path[-2], str) else path[:-1]
    user_catalog_state[call.from_user.id] = new_path
    markup = get_category_markup(new_path)
    # Always reset caption to selection prompt
    bot.edit_message_caption(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        caption='–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:',
        reply_markup=markup
    )
    bot.answer_callback_query(call.id)

@bot.callback_query_handler(func=lambda call: call.data.startswith('prod:'))
def catalogue_product(call):
    path = path_from_str(call.data[5:])
    node = get_catalog_node(path)
    # –§–æ—Ä–º–∏—Ä—É–µ–º caption —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º
    caption = f"{node['name']}\n\n–û–ø–∏—Å–∞–Ω–∏–µ: {node.get('description', '')}"
    markup = types.InlineKeyboardMarkup(row_width=2)
    for i, amount in enumerate(node['amounts']):
        markup.add(types.InlineKeyboardButton(amount['caption'], callback_data=f'amount2:{path_str(path)}:{i}'))
    markup.add(
        types.InlineKeyboardButton('–ü–æ–∫–∞–∑–∞—Ç—å —Ñ–æ—Ç–æ', callback_data=f'prod_photo:{path_str(path)}'),
        types.InlineKeyboardButton('–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–∑—ã–≤—ã', callback_data=f'prod_reviews:{path_str(path)}')
    )
    markup.add(types.InlineKeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data=f'back:{path_str(path[:-2])}'))
    # –ú–µ–Ω—è–µ–º caption –∏ –∫–Ω–æ–ø–∫–∏ —É —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ñ–æ—Ç–æ
    try:
        bot.edit_message_caption(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            caption=caption,
            reply_markup=markup
        )
    except Exception:
        # fallback: —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫–∏
        bot.edit_message_reply_markup(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            reply_markup=markup
        )
    bot.answer_callback_query(call.id)

@bot.callback_query_handler(func=lambda call: call.data.startswith('prod_photo:'))
def catalogue_product_photo(call):
    path = path_from_str(call.data.split(':', 1)[1])
    node = get_catalog_node(path)
    img = node.get('img')
    markup = types.InlineKeyboardMarkup(row_width=1)
    markup.add(types.InlineKeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data=f'prod_back:{path_str(path)}'))
    if img:
        img_path = f"img/{img}"
        with open(img_path, 'rb') as photo:
            bot.send_photo(call.message.chat.id, photo, caption=node.get('name', ''), reply_markup=markup)
    else:
        bot.send_message(call.message.chat.id, '–§–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.', reply_markup=markup)
    bot.answer_callback_query(call.id)

@bot.callback_query_handler(func=lambda call: call.data.startswith('prod_reviews:'))
def catalogue_product_reviews(call):
    path = path_from_str(call.data.split(':', 1)[1])
    node = get_catalog_node(path)
    reviews = node.get('reviews', [])
    markup = types.InlineKeyboardMarkup(row_width=1)
    markup.add(types.InlineKeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data=f'prod_back:{path_str(path)}'))
    if not reviews:
        bot.send_message(call.message.chat.id, '–û—Ç–∑—ã–≤–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.', reply_markup=markup)
        bot.answer_callback_query(call.id)
        return
    text = '–û—Ç–∑—ã–≤—ã:\n\n'
    for review in reviews:
        name = review.get('name', '-')
        stars = int(review.get('stars', 0))
        stars_str = '‚≠ê' * stars
        caption = review.get('caption', '-')
        text += f"<b>{name} {stars_str}</b>\n<blockquote>{caption}</blockquote>\n\n"
    bot.send_message(call.message.chat.id, text, parse_mode='HTML', reply_markup=markup)
    bot.answer_callback_query(call.id)

@bot.callback_query_handler(func=lambda call: call.data.startswith('prod_back:'))
def catalogue_product_back(call):
    path = path_from_str(call.data.split(':', 1)[1])
    node = get_catalog_node(path)
    caption = f"{node['name']}\n\n–û–ø–∏—Å–∞–Ω–∏–µ: {node.get('description', '')}"
    markup = types.InlineKeyboardMarkup(row_width=2)
    for i, amount in enumerate(node['amounts']):
        markup.add(types.InlineKeyboardButton(amount['caption'], callback_data=f'amount2:{path_str(path)}:{i}'))
    markup.add(
        types.InlineKeyboardButton('–ü–æ–∫–∞–∑–∞—Ç—å —Ñ–æ—Ç–æ', callback_data=f'prod_photo:{path_str(path)}'),
        types.InlineKeyboardButton('–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–∑—ã–≤—ã', callback_data=f'prod_reviews:{path_str(path)}')
    )
    markup.add(types.InlineKeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data=f'back:{path_str(path[:-2])}'))
    try:
        bot.send_photo(
            call.message.chat.id,
            open(node.get('img', 'catalogue.png'), 'rb'),
            caption=caption,
            reply_markup=markup
        )
    except Exception:
        bot.send_message(
            call.message.chat.id,
            caption,
            reply_markup=markup
        )
    bot.answer_callback_query(call.id)

@bot.callback_query_handler(func=lambda call: call.data.startswith('amount2:'))
def catalogue_amount2(call):
    _, path_str_val, idx = call.data.split(':', 2)
    path = path_from_str(path_str_val)
    node = get_catalog_node(path)
    amount = node['amounts'][int(idx)]
    user_id = call.from_user.id
    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ—Ä–∑–∏–Ω—É
    user_cart.setdefault(user_id, []).append({
        'name': node['name'],
        'amount': amount['caption'],
        'price': amount['price'],
    })
    markup = types.InlineKeyboardMarkup(row_width=2)
    markup.add(
        types.InlineKeyboardButton('‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â—ë', callback_data='add_more'),
        types.InlineKeyboardButton('üõí –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ—Ä–∑–∏–Ω—É', callback_data='show_cart'),
        types.InlineKeyboardButton('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', callback_data='cancel_cart'),
        types.InlineKeyboardButton('‚úÖ –ó–∞–∫–∞–∑–∞—Ç—å', callback_data='checkout')
    )
    text_to_send = f'–¢–æ–≤–∞—Ä "{node["name"]}" –≤ –≤–∞—Ä–∏–∞–Ω—Ç–µ "{amount["caption"]}" –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É.'
    safe_edit_message_text(bot, call.message.chat.id, call.message.message_id, text_to_send, markup)
    bot.answer_callback_query(call.id)

@bot.callback_query_handler(func=lambda call: call.data == 'add_more')
def add_more_to_cart(call):
    # –í–æ–∑–≤—Ä–∞—Ç –∫ –∫–æ—Ä–Ω—é –∫–∞—Ç–∞–ª–æ–≥–∞
    user_catalog_state[call.from_user.id] = []
    markup = get_category_markup([])
    bot.edit_message_reply_markup(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        reply_markup=markup
    )
    bot.answer_callback_query(call.id)

@bot.callback_query_handler(func=lambda call: call.data == 'show_cart')
def show_cart(call):
    user_id = call.from_user.id
    cart = user_cart.get(user_id, [])
    if not cart:
        text = '–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.'
    else:
        text = '–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n'
        total = 0
        refs = user_referrals.get(str(user_id), [])
        has_discount = len(refs) > 0
        for item in cart:
            price = item['price'] // 2 if has_discount else item['price']
            text += f"{item['name']} x {item['amount']} ‚Äî {price}‚ÇΩ\n"
            total += price
        if has_discount:
            text += f'\nüéâ –£ –≤–∞—Å —Å–∫–∏–¥–∫–∞ 50% –Ω–∞ –≤—Å–µ —Ç–æ–≤–∞—Ä—ã!'
        text += f'\n–ò—Ç–æ–≥–æ: {total}‚ÇΩ'
    markup = types.InlineKeyboardMarkup(row_width=2)
    markup.add(
        types.InlineKeyboardButton('–û—Ñ–æ—Ä–º–∏—Ç—å', callback_data='checkout'),
        types.InlineKeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='add_more'),
        types.InlineKeyboardButton('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', callback_data='cancel_cart')
    )
    safe_edit_message_text(bot, call.message.chat.id, call.message.message_id, text, markup)
    bot.answer_callback_query(call.id)

@bot.callback_query_handler(func=lambda call: call.data == 'cancel_cart')
def cancel_cart(call):
    user_cart[call.from_user.id] = []
    safe_edit_message_text(bot, call.message.chat.id, call.message.message_id, '–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞.', None)
    bot.answer_callback_query(call.id)

@bot.callback_query_handler(func=lambda call: call.data == 'checkout')
def checkout_cart(call):
    user_id = call.from_user.id
    user_catalog_state[user_id] = []
    markup = types.ForceReply()
    bot.send_message(chat_id=call.message.chat.id, text='–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ–º –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–π –æ—Ä–∏–µ–Ω—Ç–∏—Ä –∏–ª–∏ –∞–¥—Ä–µ—Å –≤ –≤–∞—à–µ–º –≥–æ—Ä–æ–¥–µ –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏ (—Ä–∞–π–æ–Ω, –º–µ—Ç—Ä–æ, —É–ª–∏—Ü–∞):', reply_markup=markup)
    user_states[user_id] = 'awaiting_address'
    bot.answer_callback_query(call.id)
@bot.message_handler(func=lambda message: user_states.get(message.from_user.id) == 'awaiting_address')
def process_address(message):
    user_id = message.from_user.id
    address = message.text
    cart = user_cart.get(user_id, [])
    refs = user_referrals.get(str(user_id), [])
    has_discount = len(refs) > 0
    total = 0
    text = '–í–∞—à –∑–∞–∫–∞–∑:\n'
    for item in cart:
        price = item['price'] // 2 if has_discount else item['price']
        text += f"{item['name']} x {item['amount']} ‚Äî {price}‚ÇΩ\n"
        total += price
    user_orders[user_id] = total
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏—Ç–æ–≥ –∑–∞–∫–∞–∑–∞ –∏ –∫–Ω–æ–ø–∫–∏ –æ–ø–ª–∞—Ç—ã
    if has_discount:
        text += f'\nüéâ –£ –≤–∞—Å —Å–∫–∏–¥–∫–∞ 50% –Ω–∞ –≤—Å–µ —Ç–æ–≤–∞—Ä—ã!'
    text += f'\n–ò—Ç–æ–≥–æ: {total}‚ÇΩ\n\n–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {address}\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:'
    markup = types.InlineKeyboardMarkup(row_width=2)
    markup.add(
        types.InlineKeyboardButton('–ö—Ä–∏–ø—Ç–∞', callback_data='pay_crypto'),
        types.InlineKeyboardButton('–ö–∞—Ä—Ç–æ–π', callback_data='pay_card')
    )
    bot.send_message(message.chat.id, text, reply_markup=markup)
    user_states.pop(user_id, None)
# --- Crypto payment handlers ---
@bot.callback_query_handler(func=lambda call: call.data == 'pay_crypto')
def choose_crypto(call):
    user_id = call.from_user.id
    bot.answer_callback_query(call.id)
    markup = types.InlineKeyboardMarkup(row_width=2)
    for symbol in CRYPTO_CURRENCIES:
        markup.add(types.InlineKeyboardButton(symbol, callback_data=f'crypto:{symbol}'))
    bot.send_message(call.message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –¥–ª—è –æ–ø–ª–∞—Ç—ã', reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith('crypto:'))
def process_crypto(call):
    user_id = call.from_user.id
    parts = call.data.split(':', 1)
    symbol = parts[1]
    total = user_orders.get(user_id)
    if total is None:
        bot.answer_callback_query(call.id, '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–∫–∞–∑–µ', show_alert=True)
        return
    coin_id = CRYPTO_IDS.get(symbol)
    try:
        resp = requests.get(f'https://api.coingecko.com/api/v3/simple/price?ids={coin_id}&vs_currencies=rub')
        resp.raise_for_status()
        price = resp.json()[coin_id]['rub']
        amount = round(total / price, 7)
    except Exception:
        bot.answer_callback_query(call.id, '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞', show_alert=True)
        return
    address = CRYPTO_ADDRESSES.get(symbol)
    text = f'–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ä–æ–≤–Ω–æ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –∫–æ—à–µ–ª—ë–∫. –ö–æ–ª-–≤–æ –∏ –∞–¥—Ä–µ—Å –º–æ–∂–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å. \n\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: `{amount}` {symbol}\n–ê–¥—Ä–µ—Å: `{address}`'
    try:
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=text, parse_mode='MARKDOWN')
    except Exception as e:
        print(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}')
    bot.answer_callback_query(call.id)

@bot.callback_query_handler(func=lambda call: call.data == 'pay')
def choose_payment_method(call):
    markup = types.InlineKeyboardMarkup(row_width=2)
    markup.add(
        types.InlineKeyboardButton('–ö—Ä–∏–ø—Ç–∞', callback_data='pay_crypto'),
        types.InlineKeyboardButton('–ö–∞—Ä—Ç–æ–π', callback_data='pay_card')
    )
# Secret command to set card number
@bot.message_handler(commands=['card'])
def cmd_card(message):
    if message.from_user.id != ADMIN_ID:
        return
    parts = message.text.split(maxsplit=1)
    if len(parts) < 2:
        bot.send_message(message.chat.id, '–£–∫–∞–∂–∏ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã: /card <–Ω–æ–º–µ—Ä>')
        return
    number = parts[1].strip()
    set_card_number(number)
    bot.send_message(message.chat.id, f'–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {number}')

# Handler for card payment selection
@bot.callback_query_handler(func=lambda call: call.data == 'pay_card')
def pay_with_card(call):
    user_id = call.from_user.id
    amount = sum(item['price'] for item in user_cart.get(user_id, []))
    card = get_card_number()
    if not card:
        bot.send_message(call.message.chat.id, "–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –Ω–µ –∑–∞–¥–∞–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
    else:
        bot.send_message(call.message.chat.id, f"–ß–µ–∫ –Ω–∞ –æ–ø–ª–∞—Ç—É\n\nüí∞ –°—É–º–º–∞: {amount}‚ÇΩ \nüí≥ –ö–∞—Ä—Ç–∞: `{card}`", parse_mode='MARKDOWN')
    bot.answer_callback_query(call.id)
    bot.send_message(call.message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã', reply_markup=markup)
    bot.answer_callback_query(call.id)
@bot.message_handler(commands=['profile'])
@bot.message_handler(func=lambda message: message.text == 'üë§ –ü—Ä–æ—Ñ–∏–ª—å')
def profile_page(message):
    user_id = message.from_user.id
    username = message.from_user.first_name
    refs = user_referrals.get(str(user_id), [])
    ref_count = len(refs)
    bot_username = bot.get_me().username
    ref_link = f'https://t.me/{bot_username}?start={user_id}'
    with open('profile.png', 'rb') as photo:
        bot.send_photo(
            message.chat.id,
            photo,
            caption=f'üë§ –ü—Ä–æ—Ñ–∏–ª—å: {username}\n\nüë• –†–µ—Ñ–µ—Ä–∞–ª–æ–≤: {ref_count}\nüîó –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ (—Å–∫–æ–ø–∏—Ä—É–π—Ç–µ):\n{ref_link}'
        )

# –£–¥–∞–ª—è—é –æ–±—Ä–∞–±–æ—Ç—á–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –º–µ—à–∞–µ—Ç —Ä–∞–±–æ—Ç–µ –¥—Ä—É–≥–∏—Ö –∫–Ω–æ–ø–æ–∫
# @bot.message_handler(func=lambda message: True)
# def show_menu_keyboard(message):
#     menu = types.ReplyKeyboardMarkup(resize_keyboard=True)
#     menu.row('üë§ –ü—Ä–æ—Ñ–∏–ª—å', 'üë• –†–µ—Ñ–µ—Ä–∞–ª—ã')
#     menu.row('üí¨ –°–≤—è–∑—å', 'üîÑ –ü–æ–º–µ–Ω—è—Ç—å –≥–æ—Ä–æ–¥')
#     menu.row('üõí –ö–∞—Ç–∞–ª–æ–≥')
#     bot.send_chat_action(message.chat.id, 'typing')
#     bot.reply_to(message, ' ', reply_markup=menu)

# –†–µ—Ñ–µ—Ä–∞–ª—ã (üë• –†–µ—Ñ–µ—Ä–∞–ª—ã)
@bot.message_handler(commands=['ref'])
@bot.message_handler(func=lambda message: message.text == 'üë• –†–µ—Ñ–µ—Ä–∞–ª—ã')
def referrals_page(message):
    user_id = message.from_user.id
    username = message.from_user.first_name
    refs = user_referrals.get(str(user_id), [])
    ref_count = len(refs)
    bot_username = bot.get_me().username
    ref_link = f'https://t.me/{bot_username}?start={user_id}'
    with open('ref.png', 'rb') as photo:
        bot.send_photo(
            message.chat.id,
            photo,
            caption=f'–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞\n\nüë• –í–∞—à–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã: {ref_count}\nüîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: {ref_link}\n\n‚ö†Ô∏è –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–∏–º –¥—Ä—É–∑—å—è–º —Å—Å—ã–ª–∫—É —Å–≤–µ—Ä—Ö—É. –ö–∞–∂–¥—ã–π –Ω–æ–≤—ã–π –ø—Ä–∏–≤–µ–¥—ë–Ω–Ω—ã–π –≤–∞–º–∏ –¥—Ä—É–≥, –±—É–¥–µ—Ç –∑–∞—Å—á–∏—Ç–∞–Ω –∫–∞–∫ —Ä–µ—Ñ–µ—Ä–∞–ª. –ü—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ 3 —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤, –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ —Å–∫–∏–¥–∫—É 50% –Ω–∞ –≤—Å–µ —Ç–æ–≤–∞—Ä—ã!'
        )

# –°–≤—è–∑—å (üí¨ –°–≤—è–∑—å)
user_orders = {}

@bot.message_handler(commands=['contact'])
@bot.message_handler(func=lambda message: message.text == 'üí¨ –°–≤—è–∑—å')
def contact_start(message):
    user_states[message.from_user.id] = 'awaiting_contact_message'
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å')
    bot.send_message(
        message.chat.id,
        '–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞. –ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–Ω–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ. –î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å".',
        reply_markup=markup
    )

@bot.message_handler(func=lambda message: user_states.get(message.from_user.id) == 'awaiting_contact_message')
def contact_process(message):
    if message.text == '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å':
        user_states.pop(message.from_user.id, None)
        menu = types.ReplyKeyboardMarkup(resize_keyboard=True)
        menu.row('üë§ –ü—Ä–æ—Ñ–∏–ª—å', 'üë• –†–µ—Ñ–µ—Ä–∞–ª—ã')
        menu.row('üí¨ –°–≤—è–∑—å', 'üîÑ –ü–æ–º–µ–Ω—è—Ç—å –≥–æ—Ä–æ–¥')
        menu.row('üõí –ö–∞—Ç–∞–ª–æ–≥')
        bot.send_message(message.chat.id, '–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.', reply_markup=menu)
        return
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É
    manager_id = 5864245473
    try:
        bot.send_message(manager_id, f'–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.first_name} (id: {message.from_user.id}):\n{message.text}')
    except Exception:
        pass
    user_states.pop(message.from_user.id, None)
    menu = types.ReplyKeyboardMarkup(resize_keyboard=True)
    menu.row('üë§ –ü—Ä–æ—Ñ–∏–ª—å', 'üë• –†–µ—Ñ–µ—Ä–∞–ª—ã')
    menu.row('üí¨ –°–≤—è–∑—å', 'üîÑ –ü–æ–º–µ–Ω—è—Ç—å –≥–æ—Ä–æ–¥')
    menu.row('üõí –ö–∞—Ç–∞–ª–æ–≥')
    bot.send_message(message.chat.id, '–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –º–µ–Ω–µ–¥–∂–µ—Ä—É!', reply_markup=menu)

# –ü–æ–º–µ–Ω—è—Ç—å –≥–æ—Ä–æ–¥ (üîÑ –ü–æ–º–µ–Ω—è—Ç—å –≥–æ—Ä–æ–¥)
@bot.message_handler(commands=['city'])
@bot.message_handler(func=lambda message: message.text == 'üîÑ –ü–æ–º–µ–Ω—è—Ç—å –≥–æ—Ä–æ–¥')
def change_city(message):
    bot.send_message(
        message.chat.id,
        '–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:',
        reply_markup=get_cities_markup(0)
    )

def safe_edit_message_text(bot, chat_id, message_id, text, reply_markup=None):
    try:
        if text:
            bot.edit_message_text(
                chat_id=chat_id,
                message_id=message_id,
                text=text,
                reply_markup=reply_markup
            )
            return
    except Exception:
        pass  # –ü—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
    if text:
        bot.send_message(chat_id, text, reply_markup=reply_markup)

if __name__ == '__main__':
    print('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!')
    bot.infinity_polling() 